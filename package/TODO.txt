======
 TODO
======

Next Release

- doc: sample code for filtering plugins
- code: [contrib. mathieu Clabaut] multiple categories per plugin (cf https://bitbucket.org/matclab/yapsy-mcl)
- doc: highlight the existence of tutorial and link to these ones:
  * http://www.micahcarrick.com/python-gtk-plugins-with-yapsy.html 
  * http://stackoverflow.com/questions/5333128/yapsy-minimal-example
- code: [feature req.] Gather detailed information on plugin load error via a callback
- code: [feature req.] Extra info to plug-in (eg add extra section or embed the ConfigParser output to the plugin_info)
- code: [feature req.] "locatePlugins() toggle between os.walk() and absolute path"
- code: [bug] Enforce a same tab convention everywhere
- code: [contrib.  Mark Fickett] improve logging
- doc: [feature req.] Plugin installation/â€‹management with python packages
- code: [bug] No traceback hen plugin throws an exception
- doc: quote more projects using yapsy:
  * http://gbin.github.com/err/
  * http://nikola.ralsina.com.ar/


Later



Next Refactoring

- code: consider making the filter and versionned plugin into plugin manager child classes (instead of decorators), err or maybe strategies ?
- code: find a correct design to make extending the plugin "loading" easier and chainable (policies/mixins, traits ?)
- code: [feature req.] "meta descerption file needed?" use strategies to change the way plugins are "described" (eg. separated text file or all info emebedded in the same python file/module), cf mhavel.
- code: [feature req.] Reloadable configuration for plugins
- code: [feature req.] Allow Decorators to extend gatherPluginInfo
